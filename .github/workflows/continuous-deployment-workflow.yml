name: cd
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"

jobs:
  test:
    name: Test
    runs-on: ubuntu-18.04
    container:
      # Ref: https://github.community/t5/GitHub-Actions/docker-pull-from-public-GitHub-Package-Registry-fail-with-quot/m-p/32782
      image: superstructor/clojure:openjdk-11-lein-2.9.1-node-browsers
    steps:
      - uses: actions/checkout@v1
      - name: Maven cache
        id: maven-cache
        uses: actions/cache@v1
        with:
          path: /root/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/project.clj') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: npm cache
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('project.clj') }}-${{ hashFiles('**/deps.cljs') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: shadow-cljs compiler cache
        uses: actions/cache@v1
        with:
          path: .shadow-cljs
          key: ${{ runner.os }}-shadow-cljs-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-shadow-cljs-
      - if: steps.maven-cache.outputs.cache-hit != 'true'
        run: lein karma-once
      - if: steps.maven-cache.outputs.cache-hit != 'true'
        name: Run cd examples/simple && lein shadow compile client
        working-directory: examples/simple
        run: lein shadow compile client
      - if: steps.maven-cache.outputs.cache-hit != 'true'
        name: Run cd examples/todomvc && lein shadow compile client
        working-directory: examples/todomvc
        run: lein shadow compile client
      - if: steps.maven-cache.outputs.cache-hit == 'true'
        run: lein -o karma-once
      - if: steps.maven-cache.outputs.cache-hit == 'true'
        name: Run cd examples/simple && lein -o shadow compile client
        working-directory: examples/simple
        run: lein -o shadow compile client
      - if: steps.maven-cache.outputs.cache-hit == 'true'
        name: Run cd examples/todomvc && lein -o shadow compile client
        working-directory: examples/todomvc
        run: lein -o shadow compile client
      - name: Slack notification
        uses: homoluctus/slatify@v2.0.1
        if: failure() || cancelled()
        with:
          type: ${{ job.status }}
          job_name: re-frame Tests
          channel: '#oss-robots'
          url: ${{ secrets.SLACK_WEBHOOK }}
          commit: true
          token: ${{ secrets.GITHUB_TOKEN }}
  release:
    name: Release
    needs: test
    runs-on: ubuntu-18.04
    container:
      # Ref: https://github.community/t5/GitHub-Actions/docker-pull-from-public-GitHub-Package-Registry-fail-with-quot/m-p/32782
      image: superstructor/clojure:openjdk-11-lein-2.9.1-node-browsers
    steps:
      - uses: actions/checkout@v1
      - name: Maven cache
        id: maven-cache
        uses: actions/cache@v1
        with:
          path: /root/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/project.clj') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Run lein release
        if: steps.maven-cache.outputs.cache-hit != 'true'
        run: |
          CLOJARS_USERNAME=${{ secrets.CLOJARS_USERNAME }} CLOJARS_TOKEN=${{ secrets.CLOJARS_TOKEN }} GITHUB_USERNAME=${{ github.actor }} GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} lein release
      - name: Run lein -o release
        if: steps.maven-cache.outputs.cache-hit == 'true'
        run: |
          CLOJARS_USERNAME=${{ secrets.CLOJARS_USERNAME }} CLOJARS_TOKEN=${{ secrets.CLOJARS_TOKEN }} GITHUB_USERNAME=${{ github.actor }} GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} lein -o release
      # This creates a 'GitHub Release' from the tag and includes link to the releases page
      # on the re-frame website. We do not use draft or prerelease features as we always want
      # the latest release to show in the right hand column of the project page regardless
      # of if it is a stable release.
      #
      # IMPORTANT: The release year is hard-coded and must be updated in this file once per year for the moment.
      # Unfortunately I could not find a way to inject the year using the GitHub Actions ${{ expr }} syntax.
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            [Changelog](http://day8.github.io/re-frame/releases/2020/)
          draft: false
          prerelease: false
      - name: Slack notification
        uses: homoluctus/slatify@v2.0.1
        if: always()
        with:
          type: ${{ job.status }}
          job_name: re-frame Deployment
          channel: '#oss-robots'
          url: ${{ secrets.SLACK_WEBHOOK }}
          commit: true
          token: ${{ secrets.GITHUB_TOKEN }}
